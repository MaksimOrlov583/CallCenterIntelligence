import streamlit as st
import os
import numpy as np
import pandas as pd
import tempfile
from datetime import datetime

import audio_processing
import emotion_analysis
import visualization
import utils
import transcription

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∞",
    page_icon="üìû",
    layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
if 'processed_files' not in st.session_state:
    st.session_state.processed_files = []
if 'current_file' not in st.session_state:
    st.session_state.current_file = None
if 'analysis_results' not in st.session_state:
    st.session_state.analysis_results = {}
if 'transcriber' not in st.session_state:
    st.session_state.transcriber = transcription.Transcriber()

# –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
st.title("üéß –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∞")
st.write("""
–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–∏—Å–µ–π –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∞, –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.
""")

# –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–∫–µ—Ç–∞ —Å –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª—å—é
with st.sidebar:
    st.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    
    # –ó–∞–≥—Ä—É–∑—á–∏–∫ —Ñ–∞–π–ª–æ–≤
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞",
        type=["wav", "mp3"],
        help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∑–∞–ø–∏—Å–µ–π –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç WAV –∏–ª–∏ MP3)"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if uploaded_file and st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø–∏—Å—å"):
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞..."):
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=f".{uploaded_file.name.split('.')[-1]}")
            temp_file.write(uploaded_file.getvalue())
            temp_file.close()
            
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
                operator_audio, customer_audio, sample_rate = audio_processing.separate_channels(temp_file.name)
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —ç–º–æ—Ü–∏–π
                emotion_analyzer = emotion_analysis.EmotionAnalyzer()
                
                # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
                operator_emotions = emotion_analyzer.analyze_emotions(operator_audio, sample_rate)
                customer_emotions = emotion_analyzer.analyze_emotions(customer_audio, sample_rate)
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
                duration = len(operator_audio) / sample_rate
                timestamps = np.linspace(0, duration, len(operator_emotions))
                
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ
                with st.spinner("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞..."):
                    try:
                        transcription_result = st.session_state.transcriber.transcribe_audio(temp_file.name)
                        if transcription_result and "segments" in transcription_result and transcription_result["segments"]:
                            operator_segments, customer_segments = st.session_state.transcriber.separate_speakers(
                                transcription_result["segments"],
                                operator_audio,
                                customer_audio,
                                sample_rate
                            )
                            transcript = st.session_state.transcriber.format_transcript(
                                sorted(operator_segments + customer_segments, key=lambda x: x.get("start", 0))
                            )
                            if not transcript or transcript == "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞":
                                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                                         "- –°–ª–∏—à–∫–æ–º —Ç–∏—Ö–∏–π –∑–≤—É–∫\n"
                                         "- –ù–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤–∞—è —Ä–µ—á—å\n"
                                         "- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ—á–∏ –≤ —Ñ–∞–π–ª–µ")
                                transcript = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ"
                        else:
                            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                                     "- –°–ª–∏—à–∫–æ–º —Ç–∏—Ö–∏–π –∑–≤—É–∫\n"
                                     "- –ù–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤–∞—è —Ä–µ—á—å\n"
                                     "- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ—á–∏ –≤ —Ñ–∞–π–ª–µ")
                            transcript = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ"
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}\n"
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                                "- –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω\n"
                                "- –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è (WAV –∏–ª–∏ MP3)\n"
                                "- –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏")
                        transcript = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏"
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                file_id = datetime.now().strftime("%Y%m%d_%H%M%S")
                result = {
                    "id": file_id,
                    "filename": uploaded_file.name,
                    "duration": duration,
                    "operator_emotions": operator_emotions,
                    "customer_emotions": customer_emotions,
                    "timestamps": timestamps,
                    "processed_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "transcript": transcript
                }
                
                st.session_state.analysis_results[file_id] = result
                
                if file_id not in st.session_state.processed_files:
                    st.session_state.processed_files.append(file_id)
                
                st.session_state.current_file = file_id
                st.success(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {uploaded_file.name}")
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            
            finally:
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                os.unlink(temp_file.name)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if st.session_state.processed_files:
        st.subheader("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏")
        for file_id in st.session_state.processed_files:
            file_info = st.session_state.analysis_results[file_id]
            if st.button(f"{file_info['filename']} ({file_info['processed_at']})", key=f"btn_{file_id}"):
                st.session_state.current_file = file_id
                st.rerun()

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
if st.session_state.current_file:
    result = st.session_state.analysis_results[st.session_state.current_file]
    
    st.header(f"–ê–Ω–∞–ª–∏–∑: {result['filename']}")
    st.write(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result['duration']:.2f} —Å–µ–∫—É–Ω–¥")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
    tab1, tab2, tab3, tab4 = st.tabs(["–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ —ç–º–æ—Ü–∏–π", "–û–±—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è"])
    
    with tab1:
        st.subheader("–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ —ç–º–æ—Ü–∏–π")
        emotion_timeline = visualization.create_emotion_timeline(
            result["timestamps"],
            result["operator_emotions"],
            result["customer_emotions"]
        )
        if emotion_timeline:
            st.image(f"data:image/png;base64,{emotion_timeline}", use_container_width=True)
    
    with tab2:
        st.subheader("–û–±—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("–≠–º–æ—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            operator_dist = visualization.create_emotion_distribution(result["operator_emotions"])
            if operator_dist:
                st.image(f"data:image/png;base64,{operator_dist}", use_container_width=True)
        
        with col2:
            st.write("–≠–º–æ—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")
            customer_dist = visualization.create_emotion_distribution(result["customer_emotions"])
            if customer_dist:
                st.image(f"data:image/png;base64,{customer_dist}", use_container_width=True)
    
    with tab3:
        st.subheader("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        df = pd.DataFrame({
            '–í—Ä–µ–º—è': result["timestamps"],
            '–≠–º–æ—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞': result["operator_emotions"],
            '–≠–º–æ—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞': result["customer_emotions"]
        })
        
        # –ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        st.dataframe(df)
        
        # –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —ç–º–æ—Ü–∏–π
        st.write("#### –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π")
        emotion_match_rate = (df['–≠–º–æ—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞'] == df['–≠–º–æ—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞']).mean() * 100
        st.metric("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π", f"{emotion_match_rate:.1f}%", 
                 delta=None)
        
        # –í—ã—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        st.write("#### –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        negative_operator = utils.count_emotion_sequences(df['–≠–º–æ—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞'], ['–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ'])
        negative_customer = utils.count_emotion_sequences(df['–≠–º–æ—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞'], ['–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ'])
        
        if negative_operator > 3:
            st.warning(f"–û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ—è–≤–ª—è–ª –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ {negative_operator} —Ä–∞–∑ –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
        
        if negative_customer > 3:
            st.warning(f"–ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—è–≤–ª—è–ª –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ {negative_customer} —Ä–∞–∑ –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        quality_score = utils.calculate_call_quality(df)
        st.write("#### –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")
        st.metric("–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞", f"{quality_score:.1f}/10")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        st.write("#### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")
        if quality_score < 7:
            if negative_operator > 2:
                st.info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û–ø–µ—Ä–∞—Ç–æ—Ä—É —Å–ª–µ–¥—É–µ—Ç –ª—É—á—à–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω")
            if negative_customer > 3:
                st.info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –°—Ç–æ–∏—Ç —É–ª—É—á—à–∏—Ç—å –Ω–∞–≤—ã–∫–∏ –¥–µ—ç—Å–∫–∞–ª–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π")
            if emotion_match_rate < 50:
                st.info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û–ø–µ—Ä–∞—Ç–æ—Ä—É —Å–ª–µ–¥—É–µ—Ç –ª—É—á—à–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –∫–ª–∏–µ–Ω—Ç–∞")
        else:
            st.success("–û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Ö–æ—Ä–æ—à–µ–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å!")
    
    with tab4:
        st.subheader("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
        if result["transcript"] and result["transcript"] != "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞":
            st.text_area("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è", result["transcript"], height=400)
            st.info("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –¢–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ —Ä–µ–ø–ª–∏–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞")
        else:
            st.warning("–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞")
            st.info("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                   "- –°–ª–∏—à–∫–æ–º —Ç–∏—Ö–∏–π –∑–≤—É–∫\n"
                   "- –ù–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤–∞—è —Ä–µ—á—å\n"
                   "- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ—á–∏ –≤ —Ñ–∞–π–ª–µ\n"
                   "- –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–µ—Ä–≤–∏—Å—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏")

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ
if uploaded_file is not None:
    st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=f".{uploaded_file.name.split('.')[-1]}")
    temp_file.write(uploaded_file.getvalue())
    temp_file.close()
    
    try:
        # –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        linear_img = visualization.plot_linear_waveform(temp_file.name)
        if linear_img:
            st.image(f"data:image/png;base64,{linear_img}", use_container_width=True)
        
        # –í–æ–ª–Ω–æ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ –∏ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞
        col1, col2 = st.columns(2)
        with col1:
            waveform_img = visualization.plot_waveform(temp_file.name)
            if waveform_img:
                st.image(f"data:image/png;base64,{waveform_img}", use_container_width=True)
        
        with col2:
            spectrogram_img = visualization.plot_spectrogram(temp_file.name)
            if spectrogram_img:
                st.image(f"data:image/png;base64,{spectrogram_img}", use_container_width=True)
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file.name)

else:
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω
    st.info("üëà –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∑–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ü—Ä–∏–º–µ—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    st.subheader("–ü—Ä–∏–º–µ—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    sample_viz = visualization.create_sample_visualization()
    if sample_viz:
        st.image(f"data:image/png;base64,{sample_viz}", use_container_width=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    st.write("""
    ### –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
    1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ** –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∑–∞–ø–∏—Å–µ–π –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∞
    2. –°–∏—Å—Ç–µ–º–∞ **—Ä–∞–∑–¥–µ–ª–∏—Ç** –∞—É–¥–∏–æ –Ω–∞ –∫–∞–Ω–∞–ª—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
    3. **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–∏** —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Anyamore
    4. **–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç** —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ø–æ–º–æ—â—å—é Whisper
    5. **–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç** —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏
    6. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∞
    
    ### –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ WAV –∏ MP3
    - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
    - –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: —Ä–∞–¥–æ—Å—Ç—å, –≥—Ä—É—Å—Ç—å, –≥–Ω–µ–≤, —Å—Ç—Ä–∞—Ö, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –≥–æ–≤–æ—Ä—è—â–∏—Ö
    - –í—Ä–µ–º–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —ç–º–æ—Ü–∏–π
    - –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """)
